#!/bin/bash
#
# This script can be used to stand up a k2 container for development
#
# This maps any files or directories specified in your config.yaml file
# into the docker container (just like k2cli does) and maps your development
# tree over the contents of the quay container.
#

# Work around OSX
realpath() {
    REALDIR=$(cd "$(dirname "$@")" && pwd -P)
    REALFILE=$(basename "$@")
    echo ${REALDIR}/${REALFILE}
}

show_help() {
    echo " Usage:"
    echo "     $0 [options]"
    echo ""
    echo " Options:"
    echo "     -c,--config <filename>    config.yaml file to use"
    echo "                               default: $HOME/.kraken/default.yaml"
    echo "     -f,--fresh                freshen the docker image from the repo"
    echo "     -h,--help                 this text"
    echo "     -i,--image   <imagename>  k2-tools docker image to use"
    echo "                               default: quay.io/samsung_cnct/k2-tools"
    echo "     -m,--home <path>          specify the path to be used for \$HOME"
}

# Mac related support checks
if [[ -z "$(which envsubst)" ]]; then
    cat <<< "
OSX doesn't have envsubst by default. Please install gettext:
    brew install gettext
    brew link --force gettext
"
    exit 1
fi
getopt -T > /dev/null
if [[ $? -ne 4 ]]; then
    cat <<< "
OSX has a very old getopt. Please install a newer one:
    brew install gnu-getopt
    and follow the instructions.
"
    exit 1
fi

# Parse command line options
GETOPT=$(getopt -q -o c:fhi:m: --long config:,fresh,help,image:,home: -n $0 -- "$@")
eval set -- "$GETOPT"

while true; do
    case $1 in
        -c|--config) CONFIGFILE="$2" ; shift 2 ;;
        -h|--help)  show_help ; exit 1 ;;
        -f|--fresh) FRESHEN=1 ; shift ;;
        -i|--image) IMAGE="$2" ; shift 2 ;;
        -m|--home) MYHOME="$2" ; shift 2 ;;
        --) shift ; break ;;
        *) show_help ; exit 1 ;;
    esac
done

MYHOME=${MYHOME:-${HOME}}
CONFIGFILE="${CONFIGFILE:-${MYHOME}/.kraken/config.yaml}"
IMAGE="${IMAGE:-quay.io/samsung_cnct/k2-tools:latest}"
GITROOT="$(git rev-parse --show-toplevel)"

# error if this isn't a k2 checkout
if ! [[ -d ${GITROOT}/ansible/roles/kraken.config ]]; then
    echo $0 must be run under your k2 checkout
fi

# error if the config file does not exist
if ! [[ -f ${CONFIGFILE} ]]; then
    echo $CONFIGFILE does not exist. Must have a valid config yaml file.
    exit 1
fi

CONFIGFILE=$(realpath ${CONFIGFILE})
MAPPINGS="$MAPPINGS -v ${CONFIGFILE}:${CONFIGFILE}"

# Add any file that exists in the config yaml to the docker maps
for d in $(sed -e 's/[^:]\+://' -e "s/^[ ]*\([\"']\)\(.*\)\1\$/\2/g" $CONFIGFILE); do
    p=$(envsubst <<< "$d")  # expand variables
    p=$(sed -e "s/^[\"']//" -e "s/[\"']$//" <<< "$p")
    # only add the map if the path is absolute, if it's not already in the string, and if it's a file or directory
    if [[ $p == /* ]] && ! [[ ${MAPPINGS} == *${p}:${p}* ]] && ([[ -f $p ]] || [[ -d $p ]]); then
        MAPPINGS="${MAPPINGS} -v ${p}:${p}"
    fi
done

# Map the git root to /kraken
MAPPINGS="${MAPPINGS} -v ${GITROOT}:/kraken"

# Map the .kraken directory
MAPPINGS="${MAPPINGS} -v ${MYHOME}/.kraken:${MYHOME}/.kraken"
MAPPINGS="${MAPPINGS} -v ${MYHOME}/.ssh:${MYHOME}/.ssh"
MAPPINGS="${MAPPINGS} -v ${MYHOME}/.aws:${MYHOME}/.aws"

# Map a bashrc and history file
MAPPINGS="${MAPPINGS} -v ${GITROOT}/lib/bashrc:${MYHOME}/.bashrc"
MAPPINGS="${MAPPINGS} -v ${MYHOME}/.dockerdev_history:${MYHOME}/.bash_history"

# Ensure the history file exists
if ! [ -f ${MYHOME}/.dockerdev_history ]; then
    touch ${MYHOME}/.dockerdev_history
fi


if [ -n "${FRESHEN}" ]; then
    echo "Refreshing image: ${IMAGE}"
    docker pull ${IMAGE}
fi

echo -e "Mappings:\n$(tr ' ' '\n' <<< "$MAPPINGS" | grep -e -v '-v' | sort)"
echo ""
echo "Running bash in k2 container. Use up.sh, down.sh, etc."
docker run ${MAPPINGS} -e HOME=${MYHOME} --rm=true -it ${IMAGE} /bin/bash --rcfile ${MYHOME}/.bashrc
