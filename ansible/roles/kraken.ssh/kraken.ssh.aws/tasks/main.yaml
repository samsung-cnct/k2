---
- name: rename cluster fact
  set_fact:
    cluster: "{{ a_cluster }}"

- name: Check bastion kind if bastion config found
  set_fact:
    bastionKind: "{{ item.bastionConfig.kind }}"
  with_items: "{{ cluster.nodePools }}"
  when: item.bastionConfig is defined
  register: bastionKind

- name: Check bastion ssh port
  set_fact:
    bastionListenPort: "{{ item.bastionConfig.listenPort }}"
  with_items: "{{ cluster.nodePools }}"
  when: item.bastionConfig is defined
  register: bastionListenPort

- name: Get bastion loadbalancer if bastion config found
  ec2_elb_facts:
    names: "{{ cluster.name }}-bastion-elb"
  register: elb_facts
  when:
    - bastionKind is defined
    - bastionKind == 'bastion-elb'

# because BOTO2 doesn't support AWS_SHARED_CREDENTIALS_FILE environment variable, do some mangling
- include: aws_config.yaml
  when: cluster.providerConfig.provider == 'aws'

- name: Gather inventory of all cluster nodes
  ec2_remote_facts:
    region: "{{ cluster.providerConfig.region }}"
    aws_access_key: "{{ cluster.providerConfig.authentication.accessKey or omit }}"
    aws_secret_key: "{{ cluster.providerConfig.authentication.accessSecret or omit }}"
    security_token: "{{ cluster.providerConfig.authentication.securityToken | default(omit) }}"
    profile: "{{ cluster.providerConfig.authentication.credentialsProfile or omit }}"
    filters:
      "tag:k2-nodepool": "{{ item.name }}"
      "tag:Name": "{{ cluster.name }}_{{ item.name }}*"
  with_items: "{{ cluster.nodePools }}"
  register: ec2_results

- name: Generate ssh inventory
  template:
    src=ssh_config.jinja2
    dest="{{ config_base }}/{{ cluster.name }}/ssh_config"

- name: Find any bastion nodes
  ec2_remote_facts:
    region: "{{ cluster.providerConfig.region }}"
    aws_access_key: "{{ cluster.providerConfig.authentication.accessKey or omit }}"
    aws_secret_key: "{{ cluster.providerConfig.authentication.accessSecret or omit }}"
    profile: "{{ cluster.providerConfig.authentication.credentialsProfile or omit }}"
    filters:
      "tag:k2-nodepool": bastion
      "tag:KubernetesCluster": "{{ cluster.name }}"
      instance-state-name: running
  register: bastion_results

- include: aws_bastion_ssh_config.yaml
  when: bastion_results.instances | length > 0
