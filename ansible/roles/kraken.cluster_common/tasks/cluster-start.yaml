---
- name: Set Cluster Fact
  set_fact:
    cluster: "{{ cluster_node_tuple.0 }}"
    node: "{{ cluster_node_tuple.1 }}"

- name: Create cloud_config base dict
  set_fact:
    cloud_config: "{{ cloud_config | combine(base_dict, recursive=true) }}"
  vars:
    base_dict: '{{ { cluster.name: { node.name: {}}} }}'

- name: Create cloud_config base dict
  set_fact:
    unitlist: "{{ unitlist | combine(base_list, recursive=true)}}"
  vars:
    base_list: '{{ { cluster.name: { node.name: []}} }}'
  when:
    - (unitlist[cluster.name] is not defined) or (unitlist[cluster.name][node.name] is not defined)

- name: Make sure generated folder for cloud init is there
  file:
    path: "{{ config_base }}/{{ cluster.name }}"
    state: directory

- name: Check that the cluster.status.lock file exists
  stat:
    path: "{{ config_base }}/{{ cluster.name }}/cluster.status.lock"
  register: cluster_status_lock_file

- name: Fail when cluster.status.lock file exists
  fail:
    msg: >-
      Spinning up  {{ cluster.name }} cluster has been canceled due to its already completed.
  when: cluster_status_lock_file.stat.exists == True and kraken_action == 'up'

- name: Loop over each node and check that corresponding ssh file exists
  include: ssh_check.yaml
  with_items:
    - "{{ node }}"
  loop_control:
    loop_var: a_node

- include: certificate_authority.yaml
- include: units.yaml
- include: os_update.yaml
  when:
    - distro == "coreos"
- include: rkt-install.yaml
  when:
    - distro != "coreos"
- include: units.yaml
