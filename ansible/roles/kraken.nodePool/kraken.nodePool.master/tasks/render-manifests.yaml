---
- name: Legacy non-versioned fabric check
  set_fact:
    fabricConfigVal: "{{ cluster.fabricConfig }}"
  when: cluster.fabricConfig.kind == 'fabric'

- name: Load the correct fabric config for the kuberenetes version
  set_fact:
    fabricConfigVal: "{{ cluster.fabricConfig.kubeVersion.versions[ kubernetes_minor_version ] if cluster.fabricConfig.kubeVersion.versions[ kubernetes_minor_version ] is defined else cluster.fabricConfig.kubeVersion.default }}"
  vars:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"
  when: cluster.fabricConfig.kind == 'versionedFabric'

- name: "Generate master api-server manifest write_file"
  set_fact:
    cloud_config: "{{ cloud_config | combine(new_data, recursive=True) }}"
  vars:
    versioned_write_file: "{{ lookup('template', kubernetes_minor_versions[ cluster.name ] + '/api-server-manifest.yaml.jinja2') }}"
    default_write_file: "{{ lookup('template', 'api-server-manifest.yaml.jinja2') }}"
    write_file:
      - path: /etc/kubernetes/manifests/api-server.yaml
        owner: root
        permissions: 0644
        content: '{{ (versioned_write_file| is_empty) | ternary(default_write_file, versioned_write_file) }}'
    write_files: "{{ cloud_config[cluster.name][node.name].write_files | default([]) + write_file }}"
    new_data: '{{ { cluster.name: { node.name: { "write_files": write_files } } } }}'

- name: "Generate master controller-manager manifest write_file"
  set_fact:
    cloud_config: "{{ cloud_config | combine(new_data, recursive=True) }}"
  vars:
    versioned_write_file: "{{ lookup('template', kubernetes_minor_versions[ cluster.name ] + '/controller-manager-manifest.yaml.jinja2') }}"
    default_write_file: "{{ lookup('template', 'controller-manager-manifest.yaml.jinja2') }}"
    write_file:
      - path: /etc/kubernetes/manifests/controller-manager.yaml
        owner: root
        permissions: 0644
        content: '{{ (versioned_write_file| is_empty) | ternary(default_write_file, versioned_write_file) }}'
    write_files: "{{ cloud_config[cluster.name][node.name].write_files | default([]) + write_file }}"
    new_data: '{{ { cluster.name: { node.name: { "write_files": write_files } } } }}'

- name: "Generate master kube-proxy manifest write_file"
  set_fact:
    cloud_config: "{{ cloud_config | combine(new_data, recursive=True) }}"
  vars:
    write_file:
      - path: /etc/kubernetes/manifests/kube-proxy.yaml
        owner: root
        permissions: 0644
        content: "{{ lookup('template', 'kube-proxy-manifest.yaml.jinja2') }}"
    write_files: "{{ cloud_config[cluster.name][node.name].write_files | default([]) + write_file }}"
    new_data: '{{ { cluster.name: { node.name: { "write_files": write_files } } } }}'

- name: "Generate master scheduler manifest write_file"
  set_fact:
    cloud_config: "{{ cloud_config | combine(new_data, recursive=True) }}"
  vars:
    write_file:
      - path: /etc/kubernetes/manifests/scheduler.yaml
        owner: root
        permissions: 0644
        content: "{{ lookup('template', 'scheduler-manifest.yaml.jinja2') }}"
    write_files: "{{ cloud_config[cluster.name][node.name].write_files | default([]) + write_file }}"
    new_data: '{{ { cluster.name: { node.name: { "write_files": write_files } } } }}'