---
#
# expects:
#   cluster
#   kubeconfig
#
#   kubernetes_minor_versions
#   kraken_endpoint
#
- name: Look up and set k8s minor version for this cluster
  set_fact:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"

- name: Execute appropriate kubectl per minor version
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"

- name: Ensure kubeconfig file exists
  file:
    path: "{{ kubeconfig }}"
    state: touch
  when:
  - not (kubeconfig | is_file)

- name: create kubeconfig entry
  command: >
    {{ kubectl }} config set-cluster {{ cluster.name }}
      --server=https://{{ kraken_endpoint }}
      --certificate-authority={{ config_base | expanduser }}/{{ cluster.name }}/certs/ca.pem
      --embed-certs=true
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    # The escaped double quotes are necessary because of the bad json keys with dashes
    query: "clusters[?name=='{{ cluster.name }}'].cluster | [0].\"certificate-authority-data\""
    ca: "{{ kconfig | json_query(query) }}"
  when:
    - not (ca | is_empty)

- name: create admin user entry from basicauth user
  command: >
    {{ kubectl }} config set-credentials {{ cluster.name }}_admin
      --username={{ default_basic_kube_auth.user }}
      --password={{ default_basic_kube_auth.password }}
      --client-certificate={{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.crt
      --client-key={{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.key
      --embed-certs=true
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    query: "users[?name=='{{ cluster.name }}_admin'].user | [0].username"
    username: "{{ kconfig | json_query(query) }}"
    default_basic_kube_auth: "{{ cluster.kubeAuth.authn.basic | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when:
    - cluster.kubeAuth.authn.basic is defined
    - cluster.kubeAuth.authn.cert is undefined
    - username != default_basic_kube_auth.user

- name: create admin user entry from cert user
  command: >
    {{ kubectl }} config set-credentials {{ cluster.name }}_admin
      --username={{ default_cert_kube_auth.user }}
      --client-certificate={{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.crt
      --client-key={{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.key
      --embed-certs=true
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    query: "users[?name=='{{ cluster.name }}_admin'].user | [0].username"
    username: "{{ kconfig | json_query(query) }}"
    default_cert_kube_auth: "{{ cluster.kubeAuth.authn.cert | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when:
    - cluster.kubeAuth.authn.cert is defined
    - username != default_cert_kube_auth.user

- name: create context entry
  command: >
    {{ kubectl }} config set-context {{ cluster.name }}_context
      --cluster={{ cluster.name }}
      --user={{ cluster.name }}_admin
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    query: "contexts[?name=='{{ cluster.name }}_context'].context | [0].cluster"
    context: "{{ kconfig | json_query(query) }}"
  when:
    - context != cluster.name + "_context"

- name: set current context
  command: >
    {{ kubectl }} config use-context {{ cluster.name }}_context
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    context_is_set: "{{ kconfig['current-context'] is defined and kconfig['current-context'] == (cluster.name + '_context') }}"
  when: not context_is_set