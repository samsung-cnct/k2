---
#
# expects:
#   a_user
#   cluster
#   kubeconfig
#
#   kubernetes_minor_versions
#   kraken_endpoint
#
- name: Generate end-user {{ a_user.user }} key
  command: >
    openssl genrsa -out {{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.key 2048
  args:
    creates: "{{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.key"

- name: Create non-rbac subj value
  set_fact:
    endsubj: "/CN={{ a_user.user }}"
  when: (cluster.kubeAuth.authz.rbac is undefined)

- name: Create rbac subj value
  set_fact:
    endsubj: "/CN={{ a_user.user }}/O={{ a_user.group }}"
  when: (cluster.kubeAuth.authz.rbac is defined)

- name: Generate end-user {{ a_user.user }} csr
  command: >
    openssl req -new -key {{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.key
      -subj {{ endsubj }} -out {{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.csr
  args:
    creates: "{{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.csr"

- name: Generate end-user {{ a_user.user }} crt
  command: >
    openssl x509 -req -in {{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.csr
      -CA {{ config_base }}/{{ cluster.name }}/certs/ca.pem
      -CAkey {{ config_base }}/{{ cluster.name }}/certs/ca-key.pem
      -CAcreateserial
      -CAserial {{ config_base }}/{{ cluster.name }}/certs/ca.srl
      -out {{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.crt -days 10000
  args:
    creates: "{{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.crt"
#
# expects:
#   a_user
#   cluster
#   kubeconfig
#
#   kubernetes_minor_versions
#   kraken_endpoint
#
- name: Look up and set k8s minor version for this cluster
  set_fact:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"

- name: Execute appropriate kubectl per minor version
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"

- name: Set kubeconfig file name
  set_fact:
     kubeconfig: "{{ config_base }}/{{ cluster.name }}/user-{{ a_user.user }}.kubeconfig"

- name: Ensure kubeconfig file exists
  file:
    path: "{{ kubeconfig }}"
    state: touch
  when:
  - not (kubeconfig | is_file)

- name: create kubeconfig entry
  command: >
    {{ kubectl }} config set-cluster {{ cluster.name }}
      --server=https://{{ kraken_endpoint }}
      --certificate-authority={{ config_base }}/{{ cluster.name }}/certs/ca.pem
      --embed-certs=true
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    # The escaped double quotes are necessary because of the bad json keys with dashes
    query: "clusters[?name=='{{ cluster.name }}'].cluster | [0].\"certificate-authority-data\""
    ca: "{{ kconfig | json_query(query) }}"
  when:
    - not (ca | is_empty)

- name: create user entry
  command: >
    {{ kubectl }} config set-credentials {{ cluster.name }}_{{ a_user.user }}
      --username={{ a_user.user }}
      --client-certificate={{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.crt
      --client-key={{ config_base }}/{{ cluster.name }}/certs/end-user-{{ a_user.user }}.key
      --embed-certs=true
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    query: "users[?name=='{{ cluster.name }}_{{ a_user.user }}'].user | [0].username"
    username: "{{ kconfig | json_query(query) }}"
  when:
    - username != a_user.user

- name: create context entry
  command: >
    {{ kubectl }} config set-context {{ cluster.name }}_context
      --cluster={{ cluster.name }}
      --user={{ cluster.name }}_{{ a_user.user }}
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    query: "contexts[?name=='{{ cluster.name }}_context'].context | [0].user"
    user_context: "{{ kconfig | json_query(query) }}"
  when:
    - user_context != cluster.name + "_" + a_user.user

- name: set current context
  command: >
    {{ kubectl }} config use-context {{ cluster.name }}_context
      --kubeconfig={{ kubeconfig }}
  vars:
    kconfig: "{{ lookup('file',kubeconfig) | from_yaml }}"
    context_is_set: "{{ kconfig['current-context'] is defined and kconfig['current-context'] == (cluster.name + '_context') }}"
  when: not context_is_set