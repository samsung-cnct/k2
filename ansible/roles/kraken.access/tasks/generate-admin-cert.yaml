---
- name: Get the Default Admin User from BasicAuth
  set_fact:
    a_user: "{{ cluster.kubeAuth.authn.basic | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when: ( cluster.kubeAuth.authn.basic is defined ) and (cluster.kubeAuth.authn.cert is undefined )

- name: Get the Default Admin User from Cert
  set_fact:
    a_user: "{{ cluster.kubeAuth.authn.cert | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when: ( cluster.kubeAuth.authn.cert is defined )

- name: Generate end-user admin key
  command: openssl genrsa -out {{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.key 2048
  args:
    creates: "{{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.key"


- name: Create non-rbac subj value
  set_fact:
    endsubj: "/CN={{ a_user.user }}"
  when: (cluster.kubeAuth.authz.rbac is undefined)

- name: Create rbac subj value
  set_fact:
    endsubj: "/CN={{ a_user.user }}/O={{ a_user.group }}"
  when: (cluster.kubeAuth.authz.rbac is defined)

- name: Generate end-user admin csr
  command: >
    openssl req -new -key {{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.key
      -subj {{ endsubj }} -out {{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.csr
  args:
    creates: "{{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.csr"

- name: Generate end-user admin crt
  command: >
    openssl x509 -req -in {{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.csr
      -CA {{ config_base | expanduser }}/{{ cluster.name }}/certs/ca.pem
      -CAkey {{ config_base | expanduser }}/{{ cluster.name }}/certs/ca-key.pem
      -CAcreateserial
      -CAserial {{ config_base | expanduser }}/{{ cluster.name }}/certs/ca.srl
      -out {{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.crt -days 10000
  args:
    creates: "{{ config_base | expanduser }}/{{ cluster.name }}/certs/end-user.crt"