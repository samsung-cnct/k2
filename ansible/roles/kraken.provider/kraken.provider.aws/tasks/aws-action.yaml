---
- name: Get modules
  command: >
    terraform get -no-color -update=true {{ config_base | expanduser }}/{{ cluster.name }} 
  args:
    chdir: "{{ config_base | expanduser }}/{{ cluster.name }}"
  ignore_errors: yes

- name: Run cluster {{ kraken_action }}
  command: >
    terraform apply -input=false -no-color {{ config_base | expanduser }}/{{ cluster.name }} 
  args:
    chdir: "{{ config_base | expanduser }}/{{ cluster.name }}"
  when: kraken_action == 'up'
  register: up_result
  until: up_result.rc == 0
  retries: "{{ action_retries }}"
  delay: 15
  ignore_errors: yes

- name: Check for terraform success
  fail: "msg='Run cluster {{ kraken_action }} failed!'"
  when: (kraken_action == 'up') and (up_result | failed)
  changed_when: false

- name: Get kraken endpoint
  shell: >
    terraform output -no-color kraken_endpoint chdir={{ config_base | expanduser }}/{{ cluster.name }}
  args:
    chdir: "{{ config_base | expanduser }}/{{ cluster.name }}"
  register: endpoint_result
  when: kraken_action == 'up'

- name: Set the kraken end point fact
  set_fact:
    kraken_endpoint: "{{ endpoint_result.stdout }}"
  when: endpoint_result | succeeded and not endpoint_result | skipped

- name: Check for terraform state file
  stat: path={{ config_base | expanduser }}/{{ cluster.name }}/terraform.tfstate
  register: tfstate
  when: (kraken_action == 'down')

- name: Run terraform destroy
  command: >
    terraform destroy -input=false -no-color -force {{ config_base | expanduser }}/{{ cluster.name }}
  args:
    chdir: "{{ config_base | expanduser }}/{{ cluster.name }}"
  when: (kraken_action == 'down') and (tfstate.stat.exists)
  register: down_result
  until: down_result.rc == 0
  retries: "{{ action_retries }}"
  delay: 15

- name: clean the terraform state generated prefix and other misc files.
  file:
    path: "{{ config_base | expanduser }}/{{ cluster.name }}/{{ item }}"
    state: absent
  when: kraken_action == 'down'
  with_items:
    - aws_prefix
    - terraform.tfstate
    - terraform.tfstate.backup
