# everything master related

variable "vpc_id" {}
variable "master_name" {}
variable "prefix" {}
variable "master_key_name" {}
{% for subnet in kraken_config.master.nodepool.providerConfig.subnet %}
variable "{{subnet}}_subnet_id" {}
{% endfor %}
variable "route53_zone_id" {}
variable "kubernetes_sec_group" {}
variable "dependency" {}

resource "coreosbox_ami" "master_ami" {
  channel        = "{{kraken_config.master.nodepool.coreos.channel}}"
  virtualization = "hvm"
  region         = "{{kraken_config.providerConfig.region}}"
  version        = "{{kraken_config.master.nodepool.coreos.version}}"
}

# IAM roles and policies for kubernetes cloud provider
data "aws_iam_policy_document" "kubernetes_master_role_doc" {
  statement {
    actions = [
      "sts:AssumeRole",
    ]
    principals = {
      type = "Service"
      identifiers = ["ec2.amazonaws.com"],
    }
    effect = "Allow"
  }
}

resource "aws_iam_role" "kubernetes_master_role" {
  name = "${var.master_name}_${var.prefix}_kubernetes_master_role"
  assume_role_policy = "${data.aws_iam_policy_document.kubernetes_master_role_doc.json}"
}

data "aws_iam_policy_document" "kubernetes_master_policy_doc" {
  statement {
    actions = [
      "ec2:*",
      "elasticloadbalancing:*",
      "route53:*",
    ]
    resources = [
      "*",
    ]
    effect = "Allow"
  }

  statement {
    actions = [
      "s3:*",
    ]
    resources = [
      "arn:aws:s3:::kubernetes-*",
    ]
    effect = "Allow"
  }
}

resource "aws_iam_role_policy" "kubernetes_master_policy" {
  name = "${var.master_name}_${var.prefix}_kubernetes_master_policy"
  role = "${aws_iam_role.kubernetes_master_role.id}"
  policy = "${data.aws_iam_policy_document.kubernetes_master_policy_doc.json}"
}

resource "aws_iam_instance_profile" "kubernetes_master_profile" {
  name = "${var.master_name}_${var.prefix}_kubernetes_master_profile"
  roles = ["${aws_iam_role.kubernetes_master_role.name}"]

  # let profile propagate https://github.com/hashicorp/terraform/issues/7198 and https://github.com/hashicorp/terraform/pull/8813
  provisioner "local-exec" {
    command = "sleep 10"
  }
}

# Launch configuration for master
resource "aws_launch_configuration" "master_launch_config" {
  name_prefix                 = "${var.master_name}_${var.prefix}_master"
  image_id                    = "${coreosbox_ami.master_ami.box_string}"
  key_name                    = "${var.master_key_name}"
  instance_type               = "{{kraken_config.master.nodepool.providerConfig.type}}"
  security_groups             = ["${var.kubernetes_sec_group}"]
  associate_public_ip_address = true
  iam_instance_profile        = "${aws_iam_instance_profile.kubernetes_master_profile.name}"
  user_data                   = "${file("{{ config_base | expanduser }}/{{kraken_config.cluster}}/cloud-config/master.cloud-config.yaml")}"

  lifecycle {
    create_before_destroy = true
  }

  # storage 
{% for storage in kraken_config.master.nodepool.providerConfig.storage %}
  {{storage.type}} {
{% for k,v in storage.opts.iteritems() %}
    {{k}} = "{{v}}"
{% endfor %}
  }
{% endfor %}
}

# if masters are load-balanced with a cloud loadbalancer, we need to define an ELB and a IAM cert to use for SSL
{% if kraken_config.master.loadbalancer == 'cloud'  %}

# Client Auth doesn't work right in amazon ELB
#resource "aws_iam_server_certificate" "master_cert" {
#  name = "{{kraken_config.cluster}}_{{kraken_config.resourcePrefix}}_master_cert"
#  certificate_chain = "${file("{{ config_base | expanduser }}/{{kraken_config.cluster}}/certs/ca.pem")}"
#  certificate_body = "${file("{{ config_base | expanduser }}/{{kraken_config.cluster}}/certs/apiserver-loadbalancer.pem")}"
#  private_key = "${file("{{ config_base | expanduser }}/{{kraken_config.cluster}}/certs/apiserver-loadbalancer-key.pem")}"
#}

resource "aws_elb" "master_elb" {
  name = "${var.master_name}-${var.prefix}-master-elb"
  cross_zone_load_balancing = true
  subnets = [{% set comma = joiner(",") %}{% for subnet in kraken_config.master.nodepool.providerConfig.subnet %}{{ comma() }}"${var.{{subnet}}_subnet_id}"{% endfor %}]
  security_groups = ["${var.kubernetes_sec_group}"]

  listener {
    instance_port = 443
    instance_protocol = "tcp"
    lb_port = 443
    lb_protocol = "tcp"
  }

{% if kraken_config.kubeAuth.authn.oidc is defined %}
  listener {
    instance_port = 30443
    instance_protocol = "tcp"
    lb_port = 30443
    lb_protocol = "tcp"
  }

  listener {
    instance_port = 30080
    instance_protocol = "tcp"
    lb_port = 30080
    lb_protocol = "tcp"
  }

  listener {
    instance_port = 31080
    instance_protocol = "tcp"
    lb_port = 31080
    lb_protocol = "tcp"
  }
{% endif %}

  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 10
    timeout = 10
    target = "TCP:443"
    interval = 45
  }

  tags {
    Name = "${var.master_name}_${var.prefix}_master_elb",
    KubernetesCluster = "${var.master_name}_${var.prefix}"
  }
}

resource "aws_route53_record" "master_record" {
  zone_id = "${var.route53_zone_id}"
  name = "apiserver.${var.master_name}.internal"
  type = "CNAME"
  ttl = "300"
  records = ["${aws_elb.master_elb.dns_name}"]
}

{% if kraken_config.kubeAuth.authn.oidc is defined %}
resource "aws_route53_record" "dex_record" {
  zone_id = "${var.route53_zone_id}"
  name = "{{ kraken_config.kubeAuth.authn.oidc.domain }}"
  type = "CNAME"
  ttl = "300"
  records = ["${aws_elb.master_elb.dns_name}"]
}
{% endif %}

{% else %}
# Launch configuration for master loadbalancer
resource "aws_launch_configuration" "master_loadbalancer_launch_config" {
  name_prefix                 = "${var.master_name}_${var.prefix}_loadbalancer"
  image_id                    = "${coreosbox_ami.master_ami.box_string}"
  key_name                    = "${var.master_key_name}"
  instance_type               = "{{kraken_config.master.nodepool.providerConfig.type}}"
  security_groups             = ["${var.kubernetes_sec_group}"]
  associate_public_ip_address = true

  lifecycle {
    create_before_destroy = true
  }
  
  #TODO
  user_data                   = ""
}

# Autoscaling group for master loadbalancer. 
resource "aws_autoscaling_group" "master_loadbalancer_nodes" {
  name                      = "${var.master_name}_${var.prefix}_master_loadbalancer_asg"
  vpc_zone_identifier       = [{% set comma = joiner(",") %}{% for subnet in kraken_config.master.nodepool.providerConfig.subnet %}{{ comma() }}"${var.{{subnet}}_subnet_id}"{% endfor %}]
  launch_configuration      = "${aws_launch_configuration.master_loadbalancer_launch_config.name}"
  wait_for_capacity_timeout = "0"
  force_delete              = true
  health_check_grace_period = "30"
  max_size                  = "1"
  min_size                  = "1"
  desired_capacity          = "1"
  health_check_type         = "EC2"


  lifecycle {
    create_before_destroy = true
  }
  
  tag {
    key                 = "Name"
    value               = "${var.master_name}_${var.prefix}_master_loadbalancer"
    propagate_at_launch = true
  }

  tag {
    key                 = "KubernetesCluster"
    value               = "${var.master_name}_${var.prefix}"
    propagate_at_launch = true
  }
}
{% endif %} 

# Autoscaling group for master. 
resource "aws_autoscaling_group" "master_nodes" {
  name                      = "${var.master_name}_${var.prefix}_master_asg"
  vpc_zone_identifier       = [{% set comma = joiner(",") %}{% for subnet in kraken_config.master.nodepool.providerConfig.subnet %}{{ comma() }}"${var.{{subnet}}_subnet_id}"{% endfor %}]
  launch_configuration      = "${aws_launch_configuration.master_launch_config.name}"
  wait_for_capacity_timeout = "0"
  force_delete              = true
  health_check_grace_period = "30"
  max_size                  = "{{kraken_config.master.nodepool.count}}"
  min_size                  = "{{kraken_config.master.nodepool.count}}"
  desired_capacity          = "{{kraken_config.master.nodepool.count}}"
{% if kraken_config.master.loadbalancer == 'cloud'  %}
  wait_for_elb_capacity     =  "{{kraken_config.master.nodepool.count}}"
  load_balancers            = ["${aws_elb.master_elb.name}"]
{% endif %}
{% if kraken_config.master.loadbalancer == 'cloud'  %}
  health_check_type         = "ELB"
{% else %}
  health_check_type         = "EC2"
{% endif %}

  lifecycle {
    create_before_destroy = true
  }
  
  tag {
    key                 = "Name"
    value               = "${var.master_name}_${var.prefix}_{{kraken_config.master.nodepool.name}}_node-autoscaled"
    propagate_at_launch = true
  }

  tag {
    key                 = "k2-nodepool"
    value               = "{{kraken_config.master.nodepool.name}}"
    propagate_at_launch = true
  }

  tag {
    key                 = "KubernetesCluster"
    value               = "${var.master_name}_${var.prefix}"
    propagate_at_launch = true
  }

{% for tag in kraken_config.master.nodepool.providerConfig.tags %}
  tag {
    key                 = "{{tag.key}}"
    value               = "{{tag.value}}"
    propagate_at_launch = true
  }
{% endfor %}
}

output "master_dependency" {
  value = "dummy"
}

output "kraken_endpoint" {
  value = "${aws_elb.master_elb.dns_name}"
}
