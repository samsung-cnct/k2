---
- name: rename cluster fact
  set_fact:
    cluster: "{{ a_cluster }}"

- name: Make sure generated folder for full cloud configs is there
  file:
    path: "{{ config_base }}/{{ cluster.name }}"
    state: directory

- name: Get the Default Admin User from BasicAuth
  set_fact:
    default_kube_basic_auth: "{{ cluster.kubeAuth.authn.basic | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when: ( cluster.kubeAuth.authn.basic is defined ) and (cluster.kubeAuth.authn.cert is undefined )

- name: Get the Default Admin User from Cert
  set_fact:
    default_kube_basic_auth: "{{ cluster.kubeAuth.authn.cert | selectattr('user', 'match', '^'+cluster.kubeAuth.authn.default_basic_user+'$') | first }}"
  when: ( cluster.kubeAuth.authn.cert is defined )

- name: Render a deployment manager template for created-cluster.yaml in advance
  template: src=deploymentmanager-create.yaml.jinja2
   dest="{{ config_base }}/{{ cluster.name }}/deploymentmanager-create.yaml"

- include: authenticate.yaml
  when: not ( dryrun | bool )
- include: process-cluster.yaml
  when: kraken_action == 'up' and not ( dryrun | bool )
- include: destroy-cluster.yaml
  when: kraken_action == 'down' and not ( dryrun | bool )
- include: deauthenticate.yaml
  when: not ( dryrun | bool )

- include: taints.yaml
  with_subelements:
    - "{{ kraken_config.clusters }}"
    - nodePools
  loop_control:
    loop_var: cluster_node_tuple
  when: kraken_action == 'up' and (cluster_node_tuple.1.nodeConfig.taints is defined or (cluster_node_tuple.1.schedulingConfig is defined and cluster_node_tuple.1.schedulingConfig.taints is defined))