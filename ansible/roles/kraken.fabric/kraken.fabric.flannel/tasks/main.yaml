---
- name: Set cluster fact
  set_fact:
    cluster: "{{ a_cluster }}"

- name: Execute appropriate kubectl per minor version
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"
  vars:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"

- name: Ensuring fabric directory exists
  file:
    path: "{{ config_base | expanduser }}/{{ cluster.name }}/fabric"
    state: directory

- name: Leagacy non-versioned fabric check
  set_fact:
    fabricConfigVal: "{{ cluster.fabricConfig }}"
  when: cluster.fabricConfig.kind == 'fabric'

- name: Load the correct fabric config for the kuberenetes version
  set_fact:
    fabricConfigVal: "{{ cluster.fabricConfig.kubeVersion.versions[ kubernetes_minor_version ] if cluster.fabricConfig.kubeVersion.versions[ kubernetes_minor_version ] is defined else cluster.fabricConfig.kubeVersion.default }}"
  vars:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"
  when: cluster.fabricConfig.kind == 'versionedFabric'

- name: Generate canal RBAC policy file
  template:
    src: "{{ item }}"
    dest: "{{ config_base | expanduser }}/{{ cluster.name }}/auth/rbac-canal-policy.yaml"
  with_first_found:
    - files:
      - "{{ kubernetes_minor_versions[ cluster.name ] }}/rbac-canal-policy.yaml.jinja2"
      - rbac-canal-policy.yaml.jinja2
  when: "cluster.kubeAuth.authz.rbac is defined"

- name: Generate canal deployment file
  template:
    src: "{{ item }}"
    dest: "{{ config_base | expanduser }}/{{ cluster.name }}/fabric/canal.yaml"
  with_first_found:
    - files:
      - "{{ kubernetes_minor_versions[ cluster.name ] }}/canal.yaml.part.jinja2"
      - canal.yaml.part.jinja2

- name: Generate canal configuration file
  template:
    src: "{{ item }}"
    dest: "{{ config_base | expanduser }}/{{ cluster.name }}/fabric/config.yaml"
  with_first_found:
    - files:
      - "{{ kubernetes_minor_versions[ cluster.name ] }}/config.yaml.part.jinja2"
      - config.yaml.part.jinja2

- name: Wait for api server
  wait_for:
    host: "{{ item | regex_replace('https://','') }}"
    port: 443
    timeout: 600
  with_items: "{{ api_servers }}"
  vars:
    kubefn: "{{ config_base | expanduser }}/{{ cluster.name }}/admin.kubeconfig"
    kubeconfig: "{{ kubefn | is_file | ternary( kubefn, '/dev/null' ) }}"
    api_servers: "{{ lookup('file', kubeconfig) | from_yaml | json_query('clusters[*].cluster.server') }}"
  when: "(not (dryrun | bool))"

- name: check kube-networking namespace state
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} get namespace kube-networking
  ignore_errors: yes
  changed_when: false
  register: kube_networking_namespace
  when: "(not (dryrun | bool))"
  failed_when: false

- name: Ensure the kube-networking namespace exists
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} create namespace kube-networking
  register: result
  retries: 120
  until: result|succeeded
  delay: 1
  when:
    - "(not (dryrun | bool))"
    - "'Error' in kube_networking_namespace.stderr "
  ignore_errors: yes

- name: check kube-networking namespace state
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} get namespace kube-networking
  ignore_errors: yes
  changed_when: false
  register: kube_networking_namespace
  when: "(not (dryrun | bool))"
  failed_when: false

- name: Confirm kube-networking namespace created
  fail:
    msg: "kube-networking namespace creation failed"
  when:
    - "(not (dryrun | bool))"
    - "'Error' in kube_networking_namespace.stderr "

- name: Deploy canal RBAC policy
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} apply -f {{ config_base | expanduser }}/{{ cluster.name }}/auth/rbac-canal-policy.yaml
  register: job_rbac_canal_results
  when:
    - "cluster.kubeAuth.authz.rbac is defined"
    - "(not (dryrun | bool))"

- name: Deploy canal configuration
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} apply -f {{ config_base | expanduser }}/{{ cluster.name }}/fabric/config.yaml --namespace=kube-networking
  when: "(not (dryrun | bool))"

- name: Deploy canal daemonset
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} apply -f {{ config_base | expanduser }}/{{ cluster.name }}/fabric/canal.yaml --namespace=kube-networking
  when: "(not (dryrun | bool))"
