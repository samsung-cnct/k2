- set_fact:
    cluster: "{{ a_cluster }}"

- name: Get oidc provider values from cluster services
  set_fact:
    oidc_provider_values: "{{ item.get('values') }}"
  with_items: "{{ cluster.helmConfig.charts | default([]) }}"
  when: item.name == "{{ cluster.kubeAuth.authn.oidc.service_name }}"

## TO DO :
# Here duplicated oidc issuer configuration.
# To support various oidc provider ( CoreOS Dex, Redhat Keycloak, CF UAA ),
# it would be better to makes a abstraction layer.
# it will dynamically retrive oidc configuration from given cluster service (ex: Dex, Keycloak, UAA)
#
# kraken_config:
#   kubeAuth:
#     authn:
#       oidc:
#         service_name: dex
#         issuer: https://dex.my.cluster.io:8443
#         domain: dex.my.cluster.io
#
# ...
#
#   clusterServices:
#     services:
#       -
#         name: dex
#         values:
#           dex:
#             Issuer: https://dex.my.cluster.io:8443
# ...
#

- name: Retrieve issuer URL
  set_fact:
    oidc_issuer: "{{ oidc_provider_values.dex.Issuer }}"

- name: Retrieve domain value from
  shell: "echo {{ oidc_issuer  }} | awk -F/ '{print $3}' | awk -F: '{print $1}'"
  register: oidc_domain

- name: Set oidc values to cluster.kubeAuth.authn
  set_fact:
    kraken_config: "{{ kraken_config | combine(
    {
      'kubeAuth':{
        'authn':{
          'oidc':{
            'issuer': oidc_issuer,
            'domain': oidc_domain.stdout
          }
        }
      }
    }, recursive=True ) }}"
