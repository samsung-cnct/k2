---
- name: Check if configuration file exists
  stat: path={{ config_file | default(config_file_default) }}
  register: config_stat

- name: Include configuration variables from defaults file
  include_vars: 
    file: "{{ role_path }}/files/config.yaml"
    name: kraken_config_defaults

- name: Include configuration variables
  include_vars: 
    file: "{{config_file}}"
    name: kraken_config_user
  when: config_stat.stat.exists == True

- name: expand default configuration and register the config fact
  set_fact:
    kraken_config: "{{ kraken_config_defaults.deployment | expand_config }}"
  when: config_stat.stat.exists != True

- name: Non-recursively combine defaults and user config expand configuration and register the config fact
  set_fact:
    kraken_config: "{{ kraken_config_defaults.deployment | combine(kraken_config_user.deployment) | expand_config }}"
  when: config_stat.stat.exists == True

- name: Trigger a fatal error
  fail: 
    msg: "Make sure that the 'cluster' is defined in {{config_file}}"
  when: (kraken_config.cluster is not defined) or (kraken_config.cluster is none) or (kraken_config.cluster|trim == '')

- name: set the kubernetes cloud provider to {{ kraken_config.provider }}
  set_fact:
    kraken_config: "{{ kraken_config | combine({'kubernetes_cloudprovider':kraken_config.provider}) }}"
  when: "kraken_config.provider in ['aws', 'gke', 'cloudstack', 'gce', 'mesos', 'openstack', 'ovirt', 'rackspace', 'vsphere']"

- name: set the kubernetes cloud provider to none
  set_fact:
    kraken_config: "{{ kraken_config | combine({'kubernetes_cloudprovider':''}) }}"
  when: "kraken_config.provider not in ['aws', 'azure', 'cloudstack', 'gce', 'mesos', 'openstack', 'ovirt', 'rackspace', 'vsphere']"

- name: Generate kubernetes master user name
  set_fact:
    kraken_config: "{{ kraken_config | combine({'auth': {'user': 'admin'}}, recursive=True) }}"
  when: (kraken_config.auth.user is undefined) or (kraken_config.auth.user is none) or (kraken_config.auth.user|trim == '')

- name: Generate kubernetes master password
  set_fact:
    kraken_config: "{{ kraken_config | combine({'auth': {'password': lookup('password', config_base + '/' + kraken_config.cluster + '/k8spassword' + ' chars=ascii_letters length=11')}}, recursive=True) }}"
  when: (kraken_config.auth.password is undefined) or (kraken_config.auth.password is none) or (kraken_config.auth.password|trim == '')

- name: set the provider type
  set_fact:
    kraken_config: "{{ kraken_config | combine({'providerConfig': {'type': 'cloudinit'}}, recursive=True) }}"
  when: (kraken_config.providerConfig.type is undefined) or (kraken_config.providerConfig.type is none) or (kraken_config.providerConfig.type|trim == '')

- name: Generate random prefix if required
  set_fact:
    kraken_config: "{{ kraken_config | combine({'resourcePrefix': lookup('password', config_base + '/' + kraken_config.cluster + '/prefix' + ' chars=ascii_letters length=7')}, recursive=True) }}"
  when: 
    "(kraken_config.resourcePrefix is undefined) or 
     (kraken_config.resourcePrefix is none) or 
     (kraken_config.resourcePrefix|trim == '')"

- include: set-oidc-info.yaml
  when: "kraken_config.kubeAuth.oidc is defined"

  #- name: Display config
  #  debug: var=kraken_config
