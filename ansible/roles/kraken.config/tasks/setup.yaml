---
- set_fact:
    cluster: "{{ a_cluster }}"

- name: Verify cloud provider is supported
  fail:
    msg: |
      {{ cluster.providerConfig.provider }} is not a supported cloud provider. Please file an issue at
      https://github.com/samsung-cnct/k2/issues to request support.
  when: cluster.providerConfig.provider not in ['aws', 'gke']

- name: Verify kubeAuth is defined
  fail:
    msg: "Make sure that there is a 'kubeAuth' stanza in {{ config_file }}"
  when: cluster.kubeAuth | is_empty

- name: Set the provider type
  set_fact:
    kraken_config: "{{ kraken_config | combine({'providerConfig': {'type': 'cloudinit' }}, recursive=True) }}"
  when: cluster.providerConfig.type | is_empty

# for when running update with adding or deleting a nodepool.
- name: Set kubeconfig path
  set_fact:
    kubeconfig: "{{ config_base | expanduser }}/{{ cluster.name }}/admin.kubeconfig"

- name: Set minor k8s version
  set_fact:
    kubernetes_minor_version: "{{ cluster.nodePools[2].kubeConfig.version[0:(cluster.nodePools[2].kubeConfig.version.find('.', 3 ))] }}"

- debug:
    msg: "{{ kubernetes_minor_version }}"

- name: Get kubectl
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"

- name: On update, check if nodepool exists on AWS if deleting a nodepool
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig }} get nodes -o jsonpath='{range .items[*]}{.metadata.labels.nodepool}{"\n"}{end}'
  register: nodepool_names

- name: Use only stdout lines for nodepool names
  set_fact:
    nodepool_names: "{{ nodepool_names.stdout_lines }}"

- debug:
    msg: "here be nodepool names {{ nodepool_names }}"

- debug:
    msg: "adding nodepools:{{ add_nodepools }}"

- debug:
    msg: "removing nodepools: {{ remove_nodepools }}"

- name: Set list of nodepools to remove
  set_fact:
    nodepools_to_remove: "{{ remove_nodepools.split(',') }}"

- name: Set list of nodepools to add
  set_fact:
    nodepools_to_add: "{{ add_nodepools.split(',') }}"

- name: Fail upon attempt to remove a nodepool that does not exist
  fail:
    msg: "The nodepool {{ item }} doesn't exist. Please check your configuration file carefully."
  when: item not in nodepool_names
  with_items:
    - "{{ nodepools_to_remove }}"

- name: Fail when nodepool exists already and argument is addNodepool
  fail:
    msg: "The nodepool {{ item }} already exists. If you wish to update configuration in this nodepool, please pass '--nodepools {{ item }}' to the update action instead."
  when: item in nodepool_names
  with_items:
    - "{{ nodepools_to_add }}"


- name: STOP
  fail:
    msg: "We stop now"
