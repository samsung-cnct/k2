---
- name: Fail if still using old style configuration format
  fail:
    msg: >-
         The configuration file ({{ config_file }}) does not have an API
         version and must be updated to the new configuration file format.
  when: kraken_config_user.version is undefined

- name: Set schema fact(s)
  set_fact:
    schema_filename: "../schemas/config/{{ kraken_config_user.version }}/config.json"
    subschema_dir: "../schemas/config/{{ kraken_config_user.version }}/"

- name: Stat schema file
  stat:
    path: "{{ schema_filename }}"
  register: schema_file

- name: Check if k2 configuration file API version is supported
  fail:
    msg: >-
         API version {{ kraken_config_user.version }} is not supported.
         Check that your configuration file ({{ config_file }}) conforms
         to a supported format.
  when: schema_file.stat.exists == false

- name: Validate k2 configuration under schema
  jsonschema:
    config_filename: "{{ config_file }}"
    schema_filename: "{{ schema_filename }}"
    subschema_dir: "{{ subschema_dir }}"
  register: validation

- name: Set deprecation fact
  set_fact:
    deprecated: "{{ validation.result.schema.deprecated | default(false) }}"

- name: Check for deprecated version
  fail:
    msg: >-
      Configuration file {{ config_file }} uses an API version {{ kraken_config_user.version }}
      which has been deprecated. It is strongly recommended that you update your configuration
      file before proceeding.  If you would like to proceed anyway, run up again with --force,
      but note that support for this API version will be dropped in the near future.
  when:
    - deprecated == true
    - config_forced == 'false'

- name: Fail if configuration file is invalid
  fail:
    msg: >-
         Configuration file ({{ config_file }}) is not a valid instance
         of API version {{ kraken_config_user.version }}.
  when: not validation.result.is_valid
