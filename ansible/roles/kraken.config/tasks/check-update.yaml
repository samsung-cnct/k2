---

- set_fact:
    cluster: "{{ a_cluster }}"

- name: Set kubeconfig path
  set_fact:
    kubeconfig: "{{ config_base | expanduser }}/{{ cluster.name }}/admin.kubeconfig"

- name: Set minor k8s version
  set_fact:
    kubernetes_minor_version: "{{ item.kubeConfig.version[0:(item.kubeConfig.version.find('.', 3 ))] }}"
  with_items:
    - "{{ cluster.nodePools }}"
  when: (item.apiServerConfig is defined) or (cluster.providerConfig.provider == 'gke')

- name: Get kubectl
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"

- name: Get currently deployed nodepools
  command: >
    {{ kubectl }} --kubeconfig={{ kubeconfig }} get nodes -o jsonpath='{range .items[*]}{.metadata.labels.nodepool}{"\n"}{end}'
  register: current_nodepools

- name: Create list of current nodepool names
  set_fact:
    current_nodepools: "{{ current_nodepools.stdout_lines }}"

- name: Make empty list for non control plane nodepool information
  set_fact:
    config_nodepool_data: []

- name: Only add non etcd nodepools
  set_fact:
    config_nodepool_data: "{{ config_nodepool_data }} + [item]"
  with_items:
    - "{{ cluster.nodePools }}"
  when: item.kubeConfig is defined

- name: Create list of nodepool names specified in config file
  set_fact:
    config_nodepools: "{{ config_nodepool_data | map(attribute='name') | list }}"

- name: Create list of names of nodepools to remove
  set_fact:
    nodepools_to_remove: "{{ remove_nodepools.split(',') }}"

- name: Create list of names of nodepools to add
  set_fact:
    nodepools_to_add: "{{ add_nodepools.split(',') }}"

- name: Do not allow control plane nodepool to be removed
  fail:
    msg: "You are attempting to add or remove a control plane nodepool. This is not permitted, as it would irretrievably break your cluster."
  with_items:
    - "{{ config_nodepool_data }}"
  when: (item.apiServerConfig is defined) and ((item.name in nodepools_to_remove) or item.name in nodepools_to_add)

- name: Combine config nodepools with nodepools_to_remove
  set_fact:
    config_and_removed_nodepools: "{{ (remove_nodepools == '') | ternary(config_nodepools, (config_nodepools | union(nodepools_to_remove))) }}"

- name: Fail if current nodepools are not contained in the combination of config nodepools and removed nodepools
  fail:
    msg: "The configuration file is missing some nodepools than are currently up and running. If you want to remove nodepools, please pass comma-separated nodepool names with the following flag: '--rmnodepools <remove,nodepool,names>' and make sure they match your configuration file."
  with_items:
    - "{{ current_nodepools }}"
  when: item not in config_and_removed_nodepools

- name: Combine current and nodepools to be added
  set_fact:
    current_and_added_nodepools: "{{ (add_nodepools == '') | ternary(current_nodepools, (current_nodepools | union(nodepools_to_add))) }}"

- name: Create future expected nodepools list
  set_fact:
    future_expected_nodepools: []

- name: Get future expected nodepools by filtering out removed nodepools from current and added nodepools
  set_fact:
    future_expected_nodepools: "{{ future_expected_nodepools }} + [item]"
  with_items:
    - "{{ current_and_added_nodepools }}"
  when:
    item not in nodepools_to_remove

- name: Fail if expected nodepools are not reflected in config file
  fail:
    msg: "It looks like you are trying to add a new nodepool, but your configuration file does not reflect this change. Please add the nodepool {{ item }} to your configuration file and try again."
  when: item not in config_nodepools
  with_items:
    - "{{ future_expected_nodepools }}"

- name: Fail upon attempt to remove a nodepool that does not exist
  fail:
    msg: "The nodepool {{ item }} doesn't exist. Please check your configuration file carefully."
  with_items:
    - "{{ nodepools_to_remove }}"
  when: item not in current_nodepools and remove_nodepools != ""

- name: Fail when nodepool exists already and argument is addNodepool
  fail:
    msg: "The nodepool {{ item }} already exists. If you wish to update configuration in this nodepool, please pass '--nodepools {{ item }}' to the update action instead."
  with_items:
    - "{{ nodepools_to_add }}"
  when: item in current_nodepools and add_nodepools !=""

- name: Fail when nothing got passed to update action
  fail:
    msg: "You must pass an action to update, either --addnodepools <nodepool,names>; --rmnodepools <nodepool,names> or --nodepools <nodepool,names>"
  when:
    add_nodepools == "" and remove_nodepools == "" and update_nodepools == ""
