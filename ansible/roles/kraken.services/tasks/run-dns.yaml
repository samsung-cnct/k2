---
- set_fact:
    cluster: "{{ a_cluster }}"

- name: Look up and set k8s minor version for this cluster
  set_fact:
    kubernetes_minor_version: "{{ kubernetes_minor_versions[cluster.name] }}"

- name: Execute appropriate kubectl per minor version
  set_fact:
    kubectl: "/opt/cnct/kubernetes/{{ kubernetes_minor_version }}/bin/kubectl"

- set_fact:
    kubeconfig: "{{ config_base | expanduser }}/{{ cluster.name }}/admin.kubeconfig"

- name: Merge User DNS Config with Default DNS Config
  set_fact:
    dns_config: "{{ kubedns | combine(cluster.dnsConfig.kubedns) | expand_config }}"

- debug:
    var: dns_config

- name: Make sure generated folder for services is there
  file:
    path: "{{ config_base | expanduser }}/{{ cluster.name }}/services"
    state: directory

- debug:
    var: kubernetes_minor_versions[ cluster.name ]

- name: Create the DNS Service Deployment
  template:
    src: "{{ item }}"
    dest: "{{ config_base | expanduser }}/{{ cluster.name }}/services/dns-deployment.yaml"
  with_first_found:
    - files:
      - "{{ kubernetes_minor_versions[ cluster.name ] }}/dns.yaml.jinja2"
      - dns.yaml.jinja2

- name: Set api_servers fact
  set_fact:
    api_servers: "{{ lookup('file', kubeconfig) | from_yaml | json_query('clusters[*].cluster.server') }}"

- name: Wait for api server to become available in case it is not already
  wait_for:
    host: "{{ item | regex_replace('https://','') }}"
    port: 443
    timeout: 600
  with_items: "{{ api_servers }}"

- name: Install DNS
  command: >
      {{ kubectl }} --kubeconfig={{ kubeconfig | expanduser }} apply -f {{ config_base | expanduser }}/{{ cluster.name }}/services/dns-deployment.yaml --namespace={{ dns_config.namespace }}
  register: deployment_dns_result

