# This installs the items needed for the cluster
# internal DNS
#
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{dns_config.k8sapp}}
  namespace: {{ dns_config.namespace }}
  labels:
    k8s-app: "{{dns_config.k8sapp}}-{{dns_config.version}}"
    kubernetes.io/cluster-service: "true"
    version: {{dns_config.version}}
spec:
  replicas: {{dns_config.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{dns_config.kubedns_max_surge}}
      maxUnavailable: {{dns_config.kubedns_max_unavail}}
  selector:
    matchLabels:
      k8s-app: {{dns_config.k8sapp}}
      version: {{dns_config.version}}
  template:
    metadata:
      labels:
        k8s-app: {{dns_config.k8sapp}}
        version: {{dns_config.version}}
        cagby.io/color: {{dns_config.color}}
        kubernetes.io/cluster-service: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
        - name: kubedns
          image: {{dns_config.kubedns_image_v15}}
          resources:
            # TODO: Set memory limits when we've profiled the container for large
            # clusters, then set request = limit to keep this container in
            # guaranteed class. Currently, this container falls into the
            # "burstable" category so the kubelet doesn't backoff from restarting it.
            limits:
              cpu: {{dns_config.kubedns_cpu_lim}}
              memory: {{dns_config.kubedns_mem_lim}}
            requests:
              cpu: {{dns_config.kubedns_cpu_req}}
              memory: {{dns_config.kubedns_mem_req}}
          livenessProbe:
            httpGet:
              path: /healthz-kubedns
              port: 8080
              scheme: HTTP
            initialDelaySeconds: {{dns_config.healthz_delay}}
            timeoutSeconds: {{dns_config.healthz_timeout}}
            successThreshold: {{dns_config.healthz_success_thresh}}
            failureThreshold: {{dns_config.healthz_failure_thresh}}
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8081
              scheme: HTTP
            # we poll on pod startup for the Kubernetes master service and
            # only setup the /readiness HTTP server once that's available.
            initialDelaySeconds: {{dns_config.readiness_delay}}
            timeoutSeconds: {{dns_config.readiness_timeout}}
          args:
          - --domain={{dns_config.dns_domain}}
          - --dns-port=10053
          - --config-map={{dns_config.k8sapp}}
          - --v={{dns_config.kubedns_log_level}}
          # __pillar['federations_domain_map']__
          env:
          - name: PROMETHEUS_PORT
            value: "10055"
          ports:
          - containerPort: 10053
            name: dns-local
            protocol: UDP
          - containerPort: 10053
            name: dns-tcp-local
            protocol: TCP
          - containerPort: 10055
            name: metrics
            protocol: TCP
        - name: dnsmasq
          image: {{dns_config.dnsmasq_image_v15}}
          livenessProbe:
            httpGet:
              path: /healthz-dnsmasq
              port: 8080
              scheme: HTTP
            initialDelaySeconds: {{dns_config.dnsmasq_delay}}
            timeoutSeconds: {{dns_config.dnsmasq_timeout}}
            successThreshold: {{dns_config.dnsmasq_succ_thresh}}
            failureThreshold: {{dns_config.dnsmasq_fail_thresh}}
          args:
          - --cache-size=1000
          - --no-resolv
          - --server=127.0.0.1#10053
          - --log-facility=-
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          resources:
            requests:
              cpu: {{dns_config.dnsmasq_cpu_req}}
              memory: {{dns_config.dnsmasq_mem_req}}
        - name: dnsmasq-metrics
          image: {{dns_config.dnsmasq_metrics_image_v15}} 
          livenessProbe:
            httpGet:
              path: /metrics
              port: 10054
              scheme: HTTP
            initialDelaySeconds: {{dns_config.dnsmasq_metrics_delay}}
            timeoutSeconds: {{dns_config.dnsmasq_metrics_timeout}}
            successThreshold: {{dns_config.dnsmasq_metrics_succ_thresh}}
            failureThreshold: {{dns_config.dnsmasq_metrics_fail_thresh}}
          args:
          - --v={{dns_config.dnsmasq_log_level}}
          - --logtostderr
          ports:
          - containerPort: 10054
            name: metrics
            protocol: TCP
          resources:
            requests:
              memory: {{dns_config.dnsmasq_metrics_mem_req}}
        - name: healthz
          image: {{dns_config.healthz_image_v15}}
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: {{dns_config.healthz_cpu_lim}}
              memory: {{dns_config.healthz_mem_lim}}
            requests:
              cpu: {{dns_config.healthz_cpu_req}}
              memory: {{dns_config.healthz_mem_req}}
          args:
            - --cmd=nslookup kubernetes.default.svc.{{dns_config.dns_domain}} 127.0.0.1 >/dev/null
            - --url=/healthz-dnsmasq
            - --cmd=nslookup kubernetes.default.svc.{{dns_config.dns_domain}} 127.0.0.1:10053 >/dev/null
            - --url=/healthz-kubedns
            - --port=8080
            - --quiet
          ports:
            - containerPort: 8080
              protocol: TCP
      dnsPolicy: Default  # Don't use cluster DNS.
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: {{dns_config.k8sapp}}
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: {{dns_config.service_name}}
  name: {{dns_config.k8sapp}}
  namespace: {{ dns_config.namespace }}
spec:
  type: ClusterIP
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  selector:
    k8s-app: {{dns_config.k8sapp}}
  clusterIP: {{dns_config.cluster_ip}}

